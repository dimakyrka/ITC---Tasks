const taskInput = document.getElementById("new-task");
const addTaskButton = document.getElementById("add-task");
const taskList = document.getElementById("task-list");

// URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const API_URL = 'http://localhost:5000';

let tasks = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    try {
        tasks = await loadTasks();
        renderTasks();
    } catch (error) {
        alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: " + error.message);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
async function loadTasks() {
    const response = await fetch(`${API_URL}/get-tasks`);
    if (!response.ok) throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç");
    return await response.json();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
async function saveTasks() {
    const response = await fetch(`${API_URL}/save-tasks`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(tasks)
    });
    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
function renderTasks() {
    taskList.innerHTML = tasks.map((task, index) => `
        <li>
            <span>${task}</span>
            <button class="edit" data-index="${index}">‚úèÔ∏è</button>
            <button class="delete" data-index="${index}">üóëÔ∏è</button>
        </li>
    `).join('');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function addTask() {
    const text = taskInput.value.trim();
    if (text) {
        tasks.push(text);
        taskInput.value = "";
        await saveTasks();
        renderTasks();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
addTaskButton.addEventListener("click", addTask);
taskInput.addEventListener("keypress", e => e.key === "Enter" && addTask());

taskList.addEventListener("click", async (e) => {
    const index = e.target.dataset.index;
    if (e.target.classList.contains("delete")) {
        if (confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?")) {
            tasks.splice(index, 1);
            await saveTasks();
            renderTasks();
        }
    } else if (e.target.classList.contains("edit")) {
        const newText = prompt("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", tasks[index]);
        if (newText && newText.trim()) {
            tasks[index] = newText.trim();
            await saveTasks();
            renderTasks();
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Telegram.WebApp.ready();
Telegram.WebApp.expand
